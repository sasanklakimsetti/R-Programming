#display element in the 20th row and 7th column
a[20,7]
#display age and bloodpressure of 1st 10 persons from dataset diabetes
print(subset(head(a,n=10),select=c(Age,BloodPressure)))
a<-read.csv("C://lpu//4th sem//INT232 - R Programming//Datasets//Prostate_cancer.csv")
View(a)
head(a)
tail(a)
print(a[1,])
print(a[1:3,])
print(a[,3])
print(a[,5:7])
print(a[1,3])
print(a[20,7])
print(subset(a,a$texture>20,select=c(diagnosis_result,radius)))
print(subset(a,a$texture>20,select=c(diagnosis_result,radius)))
print(subset(head(a,n=15),select=c(radius,smoothness)))
print(subset(head(a,n=15),select=c(perimeter,area)))
print(subset(a,a$radius<10))
print(subset(a,a$id>20,select=-c(smoothness,compactness)))
print(subset(a,select=-id))
print(subset(a,a$id>80 & a$id<100,select=c(id,radius,perimeter)))
#take 5 +ve values from user and apply all functions
c<-scan(what=numeric(),n=5)
5
#take 5 +ve values from user and apply all functions
c<-scan(what=numeric(),n=5)
abs(c)
sqrt(c)
ceiling(c)
floor(c)
#take 5 -ve values from user apply all functions
d<-scan(what=numeric(),n=5)
trunc(0.99)
# trunc() : eleminates the decimal part
trunc(0.21)
trunc(0.99)
#round() : round off the decimal number
round(6.1254)
round(6.6254)
round(9.54367, digits=2)
round(9.612,digits=3)
round(9.615,digits=3)
round(9.54567, digits=2)
3
round(9.54367, digits=2)
round(9.612,digits=3)
round(9.615,digits=3)
#string functions
str="Hello all"
#substring
print(substr(str,1,5))   #print(substr(str,start,end))
str2="Come to my room"
print(substr(str2,1,4))
#find no.of characters in the string
str3<-"This is me"
print(nchar(str3))
str4<-"Students complete your task as soon as possible"
print(nchar(str4))
print(substr(str4,27,37))
#grep() : used to match the pattern from the given string
x<-c("GFG","gfg","xyz","XYZ")
grep("gfg",x)
grep("GFG",x)
grep("xyz",x,ignore.case=FALSE)   #it is case-sensitive
grep("XYZ",x,ignore.case=TRUE)    #it is non case-sensitive
grep("gfg",x,value=T)      #value=T means we want value so it will give value only and not index
grep("gfg",x,value=F)      #value=F means we don't value so it will give the index and not the value
y<-"Welcome to LPU"
grep("to",y)   # it will give only 1 as index as it is a single string whereas the above one is the vector so it will give different index for different string
z<-c("ABC","abc","DEF","def")
grep("DEF",z)
grep("DEF",z,ignore.case=TRUE)
grep("abc",z,ignore.case=FALSE)
grep("abc",z,ignore.case=TRUE)
grep("ABC",z,value=T)
grep("ABC",z,value=F)
#minimum occurence of string
grep("b+",c("ab+","bda2","+ccaa","ad"),value=TRUE)  #returns strings where b is there
#0 or maximum occurence of string
grep("b*",c("ab+","bda2","+ccaa","ad"),value=TRUE)  #returns value of strings with 0 or maximum occurence of  matched string
grep("b*",c("ab+","bda2","+ccaa","ad"),value=F)   #returns positions of the matched strings
#replace a string with another string in the first occurence
x1<-"R-Programming"
print(sub("R","C",x1))
#replace "r" with "c"
print(sub("r","c",x1))
#replace "n" with "M"
print(sub("n","M",x1))
x2<-"Hello world HELLO"
sub("ell","how",x2,ignore.case=TRUE)
sub("HELL","hai",x2,ignore.case=FALSE)
sub("HELL","hai",x2,ignore.case=TRUE)
#strsplit()
x3<-"Hello everyone"
print(strsplit(x3,"o"))  #wherever the character encounters the string will get splitted there and the rest will become another string and that charcater will not be there in any string
print(strsplit(x3,"ll"))
string_date<-c("2-07-2020","5-05-2020","2-06-2020")
print(strsplit(string_date,"-"))
print(strsplit(string_date,"0"))
x4<-"Hello2World"
res<-strsplit(x4,split="[0-9]+")   #wherever the numbers from 0-9 occurs then the string will get splitted
print(res)
#tolower()
#toupper()
x5<-"AbCdEfG"
x5<-tolower(x5)
print(x5)
x5<-toupper(x5)
print(x5)
#create a vector of strings in lower case and then convert them to upper case
str<-c("ab","cd","ef","gh","ij")
new_str<-lapply(str,toupper)
print(new_str)
print(class(new_str))
#create a vector of number and print their square root
num<-c(1:30)
sq<-lapply(num,sqrt)
print(sq)
print(class(sq))
#convert the list into vector
num_vec<-unlist(sq)
print(num_vec)
print(class(num_vec))
#give five examples for apply and lapply functions
a<-matrix(c(1:100),nrow=10,ncol=10)
print(apply(a,1,sum))
print(apply(a,2,sum))
print(apply(a,1,function(a) a-2))
print(apply(a,2,function(a) a-2))
print(apply(a,1,function(a) a*2))
print(apply(a,2,function(a) a*2))
print(apply(a,1,function(a) a/2))
print(apply(a,2,function(a) a/2))
print(lapply(a,sum))
print(lapply(a,sum))
print(lapply(a,function(a) a-2))
print(lapply(a,function(a) a-2))
print(lapply(a,function(a) a*2))
print(lapply(a,function(a) a*2))
print(lapply(a,function(a) a/2))
print(lapply(a,function(a) a/2))
#sapply() : simplified apply function
#syntax: sapply(x,fun, simplify=TRUE)
#simplify = TRUE   default  : will be in the form of input data
#simplify = FALSE : list
a1<-c(1:30)
a1_res<-sapply(a1,sqrt)   #it will be in the form of numeric vector since the simplify=TRUE by default
print(a1_res)
print(class(a1_res))
a1_res2<-sapply(a1,sqrt,simplify=FALSE)  #output will be in the form of list as simplify is marked as false
print(a1_res2)
print(class(a1_res2))
d<-iris
print(d)
#mapply() : multivariate
res3<-mapply(rep,1:4,4:1)  #rep : repeate
#1 will be repeated 4 times
#2 will be repeated 3 times
print(res3)
library("dplyr")
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(27:52),c(-13:13))
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(1:26),c(-13:13))
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(1:26),c(1:26))
a1
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(27:53),c(54:71))
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(27:53),c(54:70))
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(27:52),c(54:70))
a1
knitr::opts_chunk$set(echo=FALSE, message = FALSE)
pacman::p_load(tidyverse,
dplyr,
ggplot2,
reactable,
flexdashboard,
here)
data<-read.csv("C://lpu//4th sem//INT232 - R Programming//Project//Project testing//data//dataset.csv")
reactable::reactable(data)
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
ggplot(sub4, mapping = aes(x=Month.name,
y=transaction_qty))+
geom_line(fill="palevioletred") +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line(fill="palevioletred") +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
a2<-data.frame(name=c("A","B","C","D","E"),
course=c("BBA","MBA","BA","BE","BTech"),
age=c(20,20,20,21,23),
marks=c(10:15),
address=LETTERS(1:5))
a2<-data.frame(name=c("A","B","C","D","E"),
course=c("BBA","MBA","BA","BE","BTech"),
age=c(20,20,20,21,23),
marks=c(10:15),
address=LETTERS[1:5])
a2<-data.frame(name=c("A","B","C","D"),
course=c("BBA","MBA","BA","BE"),
age=c(20,20,20,21),
marks=c(10:13),
address=LETTERS[1:5])
a2<-data.frame(name=c("A","B","C","D"),
course=c("BBA","MBA","BA","BE"),
age=c(20,20,20,21),
marks=c(10:13),
address=LETTERS[1:4])
s<-select(a2, age, name, address)
s
#extract column 3 to column 8 using select
s1<-select(3,8)
#extract column 3 to column 8 using select
s1<-select(a1, 3, 8)
s1
a1<-data.frame(letters[1:26],LETTERS[1:26],c(1:26),c(1:26),c(1:26),c(1:26),letters[1:26],LETTERS[1:26],letters[1:26],LETTERS[1:26])
a1
#extract column 3 to column 8 using select
s1<-select(a1, , 8)
#extract column 3 to column 8 using select
s1<-select(a1, 3, 8)
s1
#extract all columns expect 7th and 10th
s2<-select(a1, -7, -9)
s2
s3<-select(a1, -starts_with("i"))
s3
s4<-select(a1, ends_with("s"))
s4
s4<-select(a1, ends_with("s"))
s4
s3<-select(a1, -starts_with("i"))
s3
s4<-select(a1, ends_with("s"))
s4
s5<-select(a1, -ends_with("s"))
s5
#extract column 3 to column 8 using select
s1<-select(a1, Three, Eight)
#extract column 3 to column 8 using select
s1<-select(a1, "Three", "Eight")
#extract column 3 to column 8 using select
s1<-select(a1, 3, 8)
s1
s3<-select(a1, -starts_with("i"))
s3
s3<-select(a1, -starts_with("S"))
s3
a1<-data.frame("one"=letters[1:26],
"Two"=LETTERS[1:26],
"Three"=c(1:26),
"Four"=c(1:26),
"Five"=c(1:26),
"Six"=c(1:26),
"Seven"=letters[1:26],
"Eight"=LETTERS[1:26],
"Nine"=letters[1:26],
"Ten"=LETTERS[1:26])
a1
s3<-select(a1, -starts_with("S"))
s3
#extract column 3 to column 8 using select without indexing
s6<-select(a1, Three, Eight)
s6
s4<-select(a1, ends_with("e"))
s4
s5<-select(a1, -ends_with("e"))
s5
s7<-select(a1, contains("o"))
s7
s8<-select(a1, Six>7)
s8<-select(a1, Six > 7)
a1<-data.frame("one"=letters[1:26],
"Two"=LETTERS[1:26],
"Three"=c(1:26),
"Four"=c(1:26),
"Five"=c(1:26),
"Six"=c(1:26),
"Seven"=letters[1:26],
"Eight"=LETTERS[1:26],
"Nine"=letters[1:26],
"Ten"=LETTERS[1:26])
s8<-select(a1, Six > 7)
s8<-filter(a1, Six > 7)
s8
f2<-filter(a1, One > 1)
f2<-filter(a1, One > "A")
a1<-data.frame("one"=letters[1:26],
"Two"=LETTERS[1:26],
"Three"=c(1:26),
"Four"=c(1:26),
"Five"=c(1:26),
"Six"=c(1:26),
"Seven"=letters[1:26],
"Eight"=LETTERS[1:26],
"Nine"=letters[1:26],
"Ten"=LETTERS[1:26])
f2<-filter(a1, One > "A")
f2<-filter(a1, Five > 2)
f2
#Arrange
a3<-arrange(a1, desc(Six))
a3
a4<-arrange(a1,-One)
a4<-arrange(a1,-Six)
a4
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line() +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(dplyr)
ggplot(data=mtcars, mapping=aes(x=mpg, y=gear, color=mpg))+geom_line(size=1,alpha=0.5)+facet_wrap(vars(gear))+labs(title="mpg vs gears", subtitle="Comparision between mpg and gears", x="MPG",y="Gear",color="mpg")
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line(size=1) +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
library("iris")
library(iris)
data(iris)
d<-data(iris)
d
d<-data("iris")
d
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line(size=1,mapping = aes(transaction_qty)) +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line(size=1) +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
ggplot(sub4, mapping = aes(x=Month.Name,
y=transaction_qty))+
geom_line(size=1, group=1) +
geom_text(aes(label=transaction_qty),vjust=-0.5, check_overlap = TRUE)+
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month",
y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1) +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1) +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1) +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1) +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1) +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
a1<-factor(data$Month.Name)
a1
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1, fill="palevioletred") +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1, color="palevioletred") +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1, color="palevioletred") +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
# Define the correct order of the months
month.order <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
sub4<-data %>%
group_by(Month.Name) %>%
summarize(transaction_qty=sum(transaction_qty))
# Convert Month.Name to a factor and specify the levels
sub4$Month.Name <- factor(sub4$Month.Name, levels = month.order)
# Create the plot
ggplot(sub4, mapping = aes(x=Month.Name, y=transaction_qty)) +
geom_line(size=1, group=1, color="palevioletred") +  # Add group=1 to ensure the points are connected
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis", subtitle = "This analyzes the pattern of sales of products over the months",
x="Month", y="Total Transaction Quantity")
day.order<-c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
sub5<- data %>%
group_by(Day.Name) %>%
summarise(transaction_qty=sum(transaction_qty))
sub5$Day.Name <- factor(sub5$Day.Name, levels=day.order)
ggplot(sub5, mapping=aes(x=Day.Name,
y=transaction_qty)) +
geom_line(size=1,color="palevioletred") +
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis - II", subtitle = "This analyzes the pattern of day wise sales of products",
x="Day", y="Total Transaction Quantity")
day.order<-c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
sub5<- data %>%
group_by(Day.Name) %>%
summarise(transaction_qty=sum(transaction_qty))
sub5$Day.Name <- factor(sub5$Day.Name, levels=day.order)
ggplot(sub5, mapping=aes(x=Day.Name,
y=transaction_qty)) +
geom_line(size=1,group=1,color="palevioletred") +
geom_text(aes(label=transaction_qty), vjust=-0.5, check_overlap = TRUE) +
labs(title="Temporal Analysis - II", subtitle = "This analyzes the pattern of day wise sales of products",
x="Day", y="Total Transaction Quantity")
