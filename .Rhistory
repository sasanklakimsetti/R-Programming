a10<-concat(a8,a9)
a10<-c(a8,a9)
a10<-c(a8,a9)
a8<-c(1,2,3,4,5)
a9<-c(6,7,8,9,10)
a10<-c(a8,a9)
a10
#creation of a vector
#atomic
#contains elements of same data type
#using c function
a<-c(1,2,3,4,5)
print(a)
#using seq function
a1<-seq(1,10)
print(a1)
a2<-1:30
print(a2)
#create a vector of integer
a3<-c(-10,1,23,-5)
a4<-seq(-10,10)
a5<- -100:100
print(a3)
print(a4)
print(a5)
#create a vector of character
a6<-c('a','b','c')
print(a6)
#accessing elements of a vector
#by indexing
#in vectors indexing starts from 1
print(a[-1])  #it removes first element and display other elements
print(a[-2]) #it removes second element and display other elements
print(a[1]) #it will print the first element of the vector
print(a[2]) #it will print the second element of the vector
#create a vector of 30 elements. access 28th element and remove 19th element
a7<-1:30
print(a7[28])
print(a7[-19])
#concatenation of vector
a8<-c(1,2,3,4,5)
a9<-c(6,7,8,9,10)
a10<-c(a8,a9)
a10  #can also print a vector like this. whole vector will be printed
#NULL : it will remove the vector
x=NULL
x1<-1:10
print(x1[1:3])    #print values of vector from 1st to 3rd
#create a vector of 15 elements and print the elements from 1 to 13
a11<-1:15
print(a11[1:13])
a12<-c(1,3,5,7,9,2,4,6,8,10)
a12
a12[a12>5&a12<10] #will print the elements which are b/w 5 to 10 inclusively
a12[a12>5|a12<10] #will print the elements which are less than 10 as well as elements that are greater than 51
print(sort(a12)) #by default sorting will be done in ascending order
print(sort(a12,decreasing=TRUE)) #sorting in decreasing order with keyword decreasing=TRUE. if decreasing=FALSE then ascending
max(a12) #maximum value of the vector
min(a12) #minimum value of the vector
a13<-c(6,2,7,8,6,3,4)
print(a13)
which(a13==6)  #will print the indices where the value is 6 in a vector
a13==6  #checks the whole vector and return TRUE or FALSE for each index according to the value
x<-5 #declaration of an integer
print(x) # can also just write x
which(a13==6)  #will print the indices where the value is 6 in a vector
a13==6  #checks the whole vector and return TRUE or FALSE for each index according to the value
v1[-20]
v1<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
v1<-seq(1:30)
v1<-1:30
sort(v1)
sort(v1,decreasing=TRUE)
v1[6]
v1[10]
v1[-20]
max(v1)
min(v1)
v1=NULL
v1
v2<-1:15
v3<-16:30
v4<-c(v2,v3)
v4
v5=v2+v3
v6=v2-v3
v7=v2*v3
v8=v2/v4
v5
v5<-v2+v3
v6=v2-v3
v7=v2*v3
v8=v2/v4
v5
v8=v2/v4
v9<-v2%%v3
v10<-v2%/%v3
v5
v6
v7
v8
v9
v10
#modify the value of 7th index
v2[7]=31
v2
#modify the value of 8th index
v3[8]=32
v3
#list
#contains elements of different data types
#created using list() function
a<-c(1,2,3,4)
b<-c("Hello","Hi")
c<-c(TRUE,FALSE)
d<-c(10.5,11.5,2.5)
e<-list(a,b,c,d)   #list
e
list1<-list(c("Sasank","Hello"),c(10,15),TRUE,1.5)  #if we use a c function in the list declaration then it will be seperate vector inside the list
list1
#names() function is used for naming the list
list2<-list(c("Rishith","Karthikeya"),c(10,8),list("B.Tech","B.Tech"))  #nested lists  #c() is a vector inside the list and list() is a another list inside the list
list2
names(list2)<-c("Student","Marks","Courses")
list2        #it is like the column names in excel
#accessing by indexing
#accessing  the vector inside the list
v1<-list2[[1]]
v1[[1]]
v1[[2]]
#list
#contains elements of different data types
#created using list() function
a<-c(1,2,3,4)
b<-c("Hello","Hi")
c<-c(TRUE,FALSE)
d<-c(10.5,11.5,2.5)
e<-list(a,b,c,d)   #list
e
list1<-list(c("Sasank","Hello"),c(10,15),TRUE,1.5)  #if we use a c function in the list declaration then it will be seperate vector inside the list
list1
#names() function is used for naming the list
list2<-list(c("Rishith","Karthikeya"),c(10,8),list("B.Tech","B.Tech"))  #nested lists  #c() is a vector inside the list and list() is a another list inside the list
list2
names(list2)<-c("Student","Marks","Courses")
list2        #it is like the column names in excel
#accessing a list can be done in two ways
#indexing
#names
#accessing by indexing
#accessing  the vector inside the list
v1[[1]]
v1[[2]]
#accessing the nested list
nested_list<-list2[[3]]
nested_list[[1]]
nested_list[[2]]
#accessing the nested list without creating a new list
list2[[3]][[2]]    #accessing the 2nd element of the nested list
list2[[1]][[2]]    #accessing the 2nd element of the vector inside the list
print(list2[3])  #accessing the whole nested-list by indexing
print(list2[[3]][[1]])  #accessing the particular element in the nested list by indexing
print(list2[1])   #accessing the whole vector inside the list by indexing
print(list2[[1]][[2]])  #accessing the particular element of the vector inside the list by indexing
#accessing by names
print(list2["Marks"])   #accessing the Marks column using the names accessing of the list
print(list2["Courses"])
print(list2$Student)   #using $ sign
list3<-list(c(1,2,3),c("HI","Hello","Hey"),list(10.5,2.5,2.2))
#accessing 3rd element of the 3rd subset of the list
print(list3[[3]][[3]])
#accessing 2nd element of first sublist
print(list3[[1]][[2]])
#accessing by indexing
#accessing  the vector inside the list
v1<-list2[[1]]
v1
v1[[1]]  #will access the first index of the vector v1 i.e. first index of the first index of list2
v1[[2]]
#accessing the nested list
nested_list<-list2[[3]]
nested_list[[1]]
nested_list[[2]]
#accessing the nested list without creating a new list
list2[[3]][[2]]    #accessing the 2nd element of the nested list
list2[[1]][[2]]    #accessing the 2nd element of the vector inside the list
print(list2[3])  #accessing the whole nested-list by indexing
print(list2[[3]][[1]])  #accessing the particular element in the nested list by indexing
print(list2[1])   #accessing the whole vector inside the list by indexing
print(list2[[1]][[2]])  #accessing the particular element of the vector inside the list by indexing
#accessing by names
print(list2["Marks"])   #accessing the Marks column using the names accessing of the list
print(list2["Courses"])
print(list2$Student)   #using $ sign
list3<-list(c(1,2,3),c("HI","Hello","Hey"),list(10.5,2.5,2.2))
#accessing 3rd element of the 3rd subset of the list
print(list3[[3]][[3]])
#accessing 2nd element of first sublist
print(list3[[1]][[2]])
list1<-list(c('A','B','C'),c(1,2,3),c(TRUE,FALSE,TRUE),c(5+3i,1+2i,3+5i),c(1.1,2.2,3.3))
names(list1)<-c("character", "integer", "logical", "complex", "numeric")
print(list1[1])
print(list1[2])
print(list1[3])
print(list1[4])
print(list1[5])
print(list1["character"])
print(list1["integer"])
print(list1["logical"])
print(list1["complex"])
print(list1["numeric"])
print(list1$character)
print(list1$integer)
print(list1$logical)
print(list1$complex)
print(list1$numeric)
print(list1[[3]][[3]])
print(list1[[2]][[1]])
print(list1[[1]][[2]])
list2<-list(c('A','B','a'),c(1,2,3),c(2.1,5.2,3.1))
list3<-list(c(2+2i,1+5i,5-5i),c(TRUE,FALSE,TRUE))
list4<-list(c('C','D','E'),c("R","Programming","hello"))
list5<-c(list2,list3,list4)
list5
print(list5[[2]][[2]])
print(list5[[1]][[1]])
print(list5[[3]][[3]])
vector1<-unlist(list5)
print(vector1)
list5[[1]]=NULL
print(list5)
#unlist()
#it is used to convert lists into vectors
list1<-list(1:5)
list2<-list(6:9)
vector1<-unlist(list1)    #converting a list into vector using unlist() function
vector2<-unlist(list2)    #converting a list into vector using unlist() function
print(vector1)
print(vector2)
#if we convert a list containing different datatypes into a vector then that vector will have all the values which has greater space inside the list
list3<-list(1,"Hi",2.2)
vector3<-unlist(list3)
print(vector3)
#array
#single dimension array
#array() function with single parameter
#syntax : array(data)
#array in R takes vector as input
#we need to create a vector first and then convert into an array
a<-c(1:5)
arr<-array(a)
print(arr)
#multidimensional array
#array() function with 2 parameters
#syntax : array(data, dim=c(no.of rows, no.of columns, no.of array/matrix))
b<-c(6:10)
c<-c(11:15)
arr1<-array(c(b,c),dim=c(2,2,3))
print(arr1)
#naming of arrays
#syntax: array(data,dim=c(no.of rows, no.of col, no.of matrix/array),dimnames = list(row_name,col_name,mat_name))
d<-c(16:21)
e<-c(22:27)
row_name<-c("row1","row2")
col_name<-c("col1","col2")
mat_name<-c("mat1","mat2","mat3")
arr2<-array(c(d,e),dim=c(2,2,3),dimnames = list(row_name,col_name,mat_name))
print(arr2)
#accessing elements of an array
#syntax: arr[row_no,col_no,matrix_no]
print(arr2[2,2,3])    #it will print 2nd row 2nd column element of 3rd matrix
print(arr2[c(1,2),,1])  #will print 1st and 2nd row of all columns of 1st matrix
print(arr2[,1,2]) #will print 1st column of all rows of 2nd matrix
print(arr2[1,,3])  #will print 1st row of 3rd matrix
print(arr2[1,c(1,2),])  #will print 1st and 2nd column if all matrix
print(arr2[1,1,c(1,2)]) #will print 1st row 1st column of 1st and 2nd matrix
#create an array of size(4,4,5)
#assign names to the elements of the array
#access all rows of 1st matrix
#access 2nd and 3rd rows of 4th matrix
#access 3rd column of 3rd matrix
#access 4th row and 4th column of 2nd matrix
#access element in  the 4th row and 3rd column of 3rd matrix
#access element in the 3rd row and 4th column of 1st matrix
a<-c(1:80)
col_name<-c("col1","col2","col3","col4")
row_name<-c("row1","row2","row3","row4")
mat_name<-c("mat1","mat2","mat3","mat4","mat5")
arr<-array(a,dim=c(4,4,5),dimnames = list(row_name,col_name,mat_name))
print(arr)
print(arr[,,1])
print(arr[c(2,3),,4])
print(arr[,3,3])
print(arr[4,4,2])
print(arr[4,3,3])
print(arr[3,4,1])
print(arr[3,4,1])
r_name<-c("row1","row2","row3","row4","row5")
c_name<-c("col1","col2","col3","col4","col5","col6")
a<-matrix(c(1:30),nrow=5,ncol=6,byrow=TRUE,dimnames=list(r_name,c_name))
#accessing elements of the matrix
print(a)
a<-matrix(c(1:30),nrow=5,ncol=6,byrow=TRUE,dimnames=list(r_name,c_name))
#accessing elements of the matrix
print(a)
print(a[3:5,])
print(a[,1:4])
print(a[3,3])
print(a[2,5])
#applying for loop
#modifying the elements of the matrix
for(i in 1:5){     #i for rows
for(j in 1:6){   #j for columns
if(a[i,j]>10){
a[i,j]=0
}
else if(a[i,j]<10){
a[i,j]=-1
}
}
}
print(a)
#adding two more rows to the matrix
a<-rbind(a,c(31:36))
a<-rbind(a,c(37:42))
#adding two more columns to the matrix
a<-cbind(a,c(43:47))
a<-cbind(a,c(48:52))
print(a)
print(t(a))       #transpose of a matrix
#deleting 3rd row of the matrix
a<-a[-3,]
#deleting 1st column of the matrix
a<-a[,-1]
print(a)
#creating two new matrices
b<-matrix(c(1:4),nrow=2,ncol=2,byrow=TRUE)
c<-matrix(c(5:8),nrow=2,ncol=2,byrow=TRUE)
#performing all arithmetic operations on them
print(b+c)
print(b-c)
print(b*c)
print(b/c)
#dataframe : it is like a matrix but it can store data of multiple datatypes whereas matrix/array store homogeneous data
#creating a dataframe
#syntax: data.frame()
a<-data.frame(stud_rollno=c(1:3),
stud_name=c("Rahul","Hia","Rfs"),
stud_age=c(20,21,19))
print(a)
str(a)  #display the internal structure of dataframe
length(a)   #finding the length of dataframe
#extract 1st and 2nd column
print(a[2:3,])
print(a)
#extract 2nd and 3rd row
print(a[,1:2])
#extracting specific column using $ sign
result<-data.frame(a$stud_age)
result
#adding two more rows in dataframe
b<-list(4,"amit",22)   #should be equal to no.of columns otherwise give error. should consider the count upto then
c<-list(5,"sumit",23)
a<-rbind(a,b)
a<-rbind(a,c)
print(a)
#adding two more columns in dataframe
d<-c("delhi","mumbai","chennai","kolkata","hyderabad")   #should have entries equal to no.of rows otherwise gives error. should consider the count upto then
e<-c(123456,789123,456789,123456,789123)
a<-cbind(a,address=d)
a<-cbind(a,number=e)
print(a)
#delete a row
a<-a[-1,]
print(a)
#delete a columns
a<-a[,-1]
print(a)
#to combine two data frames horizontally we use cbind
#should have equal no.of columns
a1<-data.frame(id=c(1,2,3),name=c("hi","hey","hello"))
a2<-data.frame(id=c(4,5,6),name=c("bye","see you","okay"))
a3<-cbind(a1,a2)
a3
#to combine two data frames vertically we use rbind
#should have equal no.of rows
a4<-data.frame(id=c(1,2,3),name=c("Sai","Ram","Rishith"))
a5<-data.frame(age=c(19,19,18),number=c(123,456,789))
a6<-rbind(a4,a5)
a6
#to find subset of a frame we use subset function
subset(a,stud_age>21)
subset(a,address!="kolkata")
subset(a,stud_age>20,select = -stud_name)    #won't select the entire stud_name column and show the remaining entries with age>20
subset(a,stud_age>21,select=c(-address, -stud_name))       #will show the entries whose age>21 and won't show the columns address and name
subset(a,stud_age>22,select=c(address))     #will show only address where age>22
